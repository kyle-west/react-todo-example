{"version":3,"sources":["components/TodoItem/index.js","components/TodoList/index.js","App.js","serviceWorker.js","index.js"],"names":["TodoItem","label","checked","onClick","className","data-checked","undefined","id","type","onChange","htmlFor","TodoList","items","React","useState","todos","setTodos","unchecked","Object","keys","forEach","item","push","sortChecked","updateTodoItem","latest","assign","length","map","key","onKeyPress","event","todo","target","value","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+SAGe,SAASA,EAAT,GAAgD,IAA5BC,EAA2B,EAA3BA,MAAOC,EAAoB,EAApBA,QAASC,EAAW,EAAXA,QACjD,OACE,wBACEC,UAAU,WAGVC,eAAcH,EAAU,QAAKI,GAE7B,2BAAOC,GAAIN,EAAOO,KAAK,WAAWN,UAAWA,EAASO,SAAU,kBAAMN,GAASD,MAC/E,2BAAOQ,QAAST,GACbA,ICIM,SAASU,EAAT,GAAoC,IAAD,IAAdC,aAAc,MAAN,GAAM,IACpBC,IAAMC,SAASF,GADK,mBACxCG,EADwC,KACjCC,EADiC,OAZlD,SAAqBJ,GACnB,IAAMK,EAAY,GACZf,EAAU,GAOhB,OAJAgB,OAAOC,KAAKP,GAAOQ,SAAQ,SAAAC,GACzBT,EAAMS,GAAQnB,EAAQoB,KAAKD,GAAQJ,EAAUK,KAAKD,MAG7C,CAAEJ,YAAWf,WAKWqB,CAAYR,GAAnCE,EAFwC,EAExCA,UAAWf,EAF6B,EAE7BA,QAGnB,SAASsB,EAAgBH,GACvB,OAAO,SAACnB,GACNc,GAAS,SAAAS,GAAM,OAAIP,OAAOQ,OAAO,GAAID,EAAlBP,OAAA,IAAAA,CAAA,GAA4BG,EAAOnB,QAY1D,OACE,yBAAKE,UAAU,YACb,qDACA,4BACIa,EAAUU,OACPV,EAAUW,KAAI,SAACP,GAAD,OAAU,kBAACrB,EAAD,CAAU6B,IAAKR,EAAMpB,MAAOoB,EAAMlB,QAASqB,EAAeH,QAClF,2FAGLnB,EAAQyB,OAAS,GACjB,oCACE,yCACA,4BACIzB,EAAQ0B,KAAI,SAACP,GAAD,OAAU,kBAACrB,EAAD,CAAU6B,IAAKR,EAAMpB,MAAOoB,EAAMlB,QAASqB,EAAeH,GAAOnB,SAAO,SAKtG,4DACA,2BAAO4B,WA3BX,SAAyBC,GACvB,IAAIC,EAAOD,EAAME,OAAOC,MACpBF,GAAsB,UAAdD,EAAMF,MAChBb,GAAS,SAAAS,GAAM,OAAIP,OAAOQ,OAAO,GAAID,EAAlBP,OAAA,IAAAA,CAAA,GAA4Bc,GAAO,OACtDD,EAAME,OAAOC,MAAQ,Q,MCjBZC,MATf,WACE,OACE,yBAAK/B,UAAU,OACb,0DACA,kBAACO,EAAD,QCEcyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.b57281e9.chunk.js","sourcesContent":["import React from 'react'\nimport './styles.css'\n\nexport default function TodoItem({ label, checked, onClick }) {\n  return (\n    <li \n      className=\"TodoItem\" \n      \n      // reflect to an attribute in the DOM - for styling\n      data-checked={checked ? '' : undefined}\n    >\n      <input id={label} type=\"checkbox\" checked={!!checked} onChange={() => onClick(!checked)}/>\n      <label htmlFor={label}>\n        {label}\n      </label>\n    </li>\n  )\n}","import React from 'react'\nimport './styles.css'\n\nimport TodoItem from '../TodoItem'\n\nfunction sortChecked(items) {\n  const unchecked = []\n  const checked = []\n\n  // [label]: isChecked \n  Object.keys(items).forEach(item => {\n    items[item] ? checked.push(item) : unchecked.push(item)\n  }) \n\n  return { unchecked, checked }\n}\n\nexport default function TodoList ({ items = {} }) {\n  const [ todos, setTodos ] = React.useState(items);\n  const { unchecked, checked } = sortChecked(todos)\n  \n  // use a closure to snatch the item key value\n  function updateTodoItem (item) {\n    return (checked) => {\n      setTodos(latest => Object.assign({}, latest, {[item]: checked}))\n    } \n  }\n  \n  function checkForSubmit (event) {\n    let todo = event.target.value;\n    if (todo && event.key === 'Enter') {\n      setTodos(latest => Object.assign({}, latest, {[todo]: false}))\n      event.target.value = '' // reset field\n    }\n  }\n\n  return (\n    <div className=\"TodoList\">\n      <h3>Things you need to do</h3>\n      <ul>\n        { unchecked.length \n           ? unchecked.map((item) => <TodoItem key={item} label={item} onClick={updateTodoItem(item)}/>)\n           : <em>ðŸš€ Looks like you are all caught up ðŸŽ‰</em> }\n      </ul>\n      \n      { checked.length > 0 && (\n        <>\n          <h3>Completed</h3>\n          <ul>\n            { checked.map((item) => <TodoItem key={item} label={item} onClick={updateTodoItem(item)} checked/>) }\n          </ul>\n        </>\n      )}\n\n      <label>Add an item to list below</label>\n      <input onKeyPress={checkForSubmit}/>\n    </div>\n  )\n}","import React from 'react';\n\nimport { TodoList } from './components'\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>âœ… Super Cool Todo App</h1>\n      <TodoList />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}